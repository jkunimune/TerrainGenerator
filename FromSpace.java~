import java.awt.*;



public class FromSpace extends Map { // like hemispherical, but it spins!
  public static final int camPeriod = 30; // the rate at which the globe seems to turn on screen in msec/deg
  public static final int sunPeriod = -3; // the rate at which the sun seems to go around the globe in msec/deg
  int radius;
  
  
  
  public FromSpace(Globe g, int w, int h) {
    super(g, w, h);
    if (w/2 < h)  radius = w/4;
    else          radius = h/2;
    finishSuper();
  }
  
  
  public int getAngle() { // returns the angle at which we view the planet in degrees
    return (int)(System.currentTimeMillis() / camPeriod % 360);
  }
  
  
  public int getSunAngle() { // returns the angle at which the sun strikes the planet
    return (int)(System.currentTimeMillis() / sunPeriod % 360);
  }
  
  
  @Override
  public Color getColorBy(ColS c, int x, int y) { // gets the color at a point on the screen
    final Color daytime = super.getColorBy(c,x,y);
    return daytime;
  }
  
  
  public final int getLat(int x, int y) {
    if ((x-radius)*(x-radius) + (y-radius)*(y-radius) < radius*radius)
      return glb.latIndex(Math.acos(1-(double)y/radius));
    
    else if ((x-3*radius)*(x-3*radius) + (y-radius)*(y-radius) < radius*radius)
      return glb.latIndex(Math.acos(1-(double)y/radius));
    
    else
      return -1;
  }
  
  
  public final int getLon(int x, int y) {
    if ((x-radius)*(x-radius) + (y-radius)*(y-radius) < radius*radius) // if it is in the left circle
      return (int)(Math.asin((x-radius) / Math.sqrt(radius*radius - (y-radius)*(y-radius))) /Math.PI*180) + 90; // this is actually the longitude coordinate in degrees
    
    else if ((x-3*radius)*(x-3*radius) + (y-radius)*(y-radius) < radius*radius) // if it is in the right circle
      return (int)(Math.asin((x-3*radius) / Math.sqrt(radius*radius - (y-radius)*(y-radius))) /Math.PI*180) + 270;
    
    else if ((x-radius)*(x-radius) + (y-radius)*(y-radius) < (3+radius)*(3+radius) ||
             (x-3*radius)*(x-3*radius) + (y-radius)*(y-radius) < (3+radius)*(3+radius)) // if it is on the edge of a circle
      return 8355839;
    
    else
      return 0;
  }
}