public class Vector {
  private int r; // magnitude
  private double a; // altitude
  private double b; // bearing
  
  
  
  public Vector(double newX, double newY, double newZ) { // constructs a new vector given horizontal, vertical, and depthual lengths
    r = (int)Math.sqrt(newX*newX + newY*newY + newZ*newZ);
    a = Math.acos(newY/r);
    b = Math.atan(newZ/newX);
  }
  
  
  public Vector(int newR, double newAlpha, double newBeta) { // constructs a new vector given magnitude, altitude, and bearing
    r = newR;
    a = newAlpha;
    b = newBeta;
  }
  
  
  
  public double getX() { // magnitude of the x component
    return r*Math.sin(a)*Math.cos(b);
  }
  
  
  public double getY() { // magnitude of the y component
    return -r*Math.cos(a);
  }
  
  
  public double getZ() { // magnitude of the z component
    return r*Math.sin(a)*Math.sin(b);
  }
  
  
  public int getR() { // magnitude
    return r;
  }
  
  
  public double getA() { // altitude
    return a;
  }
  
  
  public double getB() { // bearing
    return b;
  }
  
  
  public Vector negative() { // computes the opposite
    return new Vector(r, Math.PI-a, (Math.PI+b)%Math.PI);
  }
  
  
  public Vector plus(Vector that) { // computes sum with that
    return new Vector(this.getX()+that.getX(), this.getY()+that.getY(), this.getZ()+that.getZ());
  }
  
  
  public Vector minus(Vector that) { // computes difference with that
    return new Vector(this.getX()-that.getX(), this.getY()-that.getY(), this.getZ()-that.getZ());
  }
  
  
  public Vector times(double c) { // computes product with c
    return new Vector((int)(r*c), a, b);
  }
  
  
  public double dot(Vector that) { // computes dot product with that
    return this.getX()*that.getX() + this.getY()*that.getY() + this.getZ()+that.getZ();
  }
  
  
  public Vector cross(Vector that) { // computes cross product with that
    return new Vector(this.getY()*that.getZ() - this.getZ()*that.getY(), this.getZ()*that.getX() - this.getX()*that.getZ(), this.getX()*that.getY() - this.getY()*that.getZ());
  }
  
  
  public double to(Vector that) { // computes angle to that
    return 0.0;
  }
  
  
  public void negate() { // negates
    a = Math.PI-a;
    b = (Math.PI+b)%Math.PI;
  }
  
  
  public void plusEquals(Vector that) { // adds that
    Vector sum = this.plus(that);
    r = sum.getR();
    a = sum.getA();
    b = sum.getB();
  }
  
  
  public void minusEquals(Vector that) { // subtracts that
    Vector dif = this.minus(that);
    r = dif.getR();
    a = dif.getA();
    b = dif.getB();
  }
  
  
  public void timesEquals(double c) { // multiplies by c
    r *= c;
  }
  
  
  public void crossEquals(Vector that) { // becomes cross product with that
    Vector txt = this.cross(that);
    r = txt.getR();
    a = txt.getA();
    b = txt.getB();
  }
}